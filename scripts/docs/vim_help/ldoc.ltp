# -- #########################################################################
# -- PROJECT
#
# local help_tag_prefix = ldoc.project:gsub("nvim%.", "", 1)
#
# local function tag(str)
#   return ("%80s"):format("*" .. str .. "*")
# end
#
# local function prefixed_tag(str)
#   return tag(help_tag_prefix .. str)
# end
#
# local function link_help(str)
#   return str:gsub("@%{(.-)%}", "|" .. help_tag_prefix .. ".%1|")
# end
#
#
# local show_params = not ldoc.no_return_or_parms
# local show_return = not ldoc.no_return_or_parms
# local show_summary = not ldoc.no_summary
#
# local custom_tags = ldoc.custom_tags
#
#
# -- #########################################################################
# -- LIB
#
# local print = ldoc.print
#
#
# local function is_nil(x)
#   return x == nil
# end
#
# local function nil_to_repr(x)
#   return "nil"
# end
#
#
# local bool = true
#
# local function to_bool(x)
#   return x and true or false
# end
#
# local function is_bool(x)
#   return x == true or x == false
# end
#
#
# local number = 1
#
#
# local string = ""
#
# local function to_string(x)
#   return ("%s"):format(x)
# end
#
# local function string_is_empty(x)
#   return to_bool(not x or x:match("^%s*$"))
# end
#
#
# local array = {}
#
# local ipairs = ldoc.ipairs
#
# local function is_array(x)
#   return to_string(x):match("^%{.*%}$")
# end
#
# function array.length(x)
#   return #x
# end
#
# function array.is_empty(x)
#   return array.length(x) == 0
# end
#
# function array.to_repr(x)
#   local l = array.length(x)
#
#   local s = "empty"
#   if l == 1 then
#     s = l .. " item"
#   elseif l > 1 then
#     s = l .. " items"
#   end
#
#   return "<array: { " .. s .. " }>"
# end
#
#
# local table = {}
#
# local iter = ldoc.modules.iter
# local pairs = ldoc.pairs
#
# local function is_table(x)
#   return to_string(x):match("^table: 0x[0-9a-f]*$")
# end
#
# function table.length(x)
#   local l = 0
#   for _, _ in pairs(x) do l = l + 1 end
#   return l
# end
#
# function table.is_empty(x)
#   return table.length(x) == 0
# end
#
# function table.to_repr(x)
#   local l = table.length(x)
#
#   local s = "empty"
#   if l == 1 then
#     s = l .. " item"
#   elseif l > 1 then
#     s = l .. " items"
#   end
#
#   return "<table: { " .. s .. " }>"
# end
#
#
# local func = function() end
#
# local function is_function(x)
#   return to_string(x):match("^function: 0x[0-9a-f]*$")
# end
#
# local function func_to_repr(x)
#   return "<" .. to_string(x) .. ">"
# end
#
#
# local function to_repr(x)
#   if is_function(x) then
#     return func_to_repr(x)
#
#   elseif is_table(x) then
#     return table.to_repr(x)
#
#   elseif is_array(x) then
#     return array.to_repr(x)
#
#   elseif is_nil(x) then
#     return nil_to_repr(x)
#
#   else
#     return ("%q"):format(x)
#   end
# end
#
# local function __inspect(x, l, i, d)
#   i = i or ""
#   d = d or 1
#
#   if not is_table(x) and not is_array(x) or d > l then
#     return to_repr(x)
#   end
#
#   local r = "{"
#
#   if is_table(x) then
#     for k, v in pairs(x) do
#       local ks = "\n" .. i .. ' ' .. to_repr(k) .. ': '
#       local vs = __inspect(v, l, i .. "  ", d + 1)
#       local l = ks .. vs
#       r = r .. l
#     end
#   elseif is_array(x) then
#     for k, v in ipairs(x) do
#       local ks = "\n" .. i .. ' ' .. to_repr(k) .. ': '
#       local vs = __inspect(v, l, i .. "  ", d + 1)
#       local l = ks .. vs
#       r = r .. l
#     end
#   end
#
#   return r .. "\n" .. i .. "}"
# end
#
# local function inspect(x, l, i)
#   l = l or 1
#   if l > 10 then l = 10 elseif l < 1 then l = 1 end
#   i = (" "):rep(i or 0)
#   return __inspect(x, l, i)
# end
#
#
# local function args(x)
#   return x:gsub("(%w+)", "{%1}")
# end
#
# local function types(x)
#   x = x:gsub("|", ", ")
#   x = x:gsub("(nil)", "`%1`")
#   x = x:gsub("(boolean)", "`%1`")
#   x = x:gsub("(number)", "`%1`")
#   x = x:gsub("(string)", "`%1`")
#   x = x:gsub("(function)", "`%1`")
#   x = x:gsub("(table)", "`%1`")
#   x = x:gsub("(thread)", "`%1`")
#   x = x:gsub("(userdata)", "`%1`")
#   return link_help(x)
# end
#
# local function builtin(x)
#   x = x:gsub("(vim%.[^,%s]+)", "`%1`")
#   return x
# end
#
# local function trim(x)
#   x = x:gsub("^%s+", "")
#   x = x:gsub("%s+$", "")
#   return x
# end
#
# local function join(x)
#   return x:gsub("%s+", " ")
# end
#
# local function wrap(x, indent, limit)
#   indent = indent or 0
#   limit = (limit or 79) - indent - 1
#   indent = (" "):rep(indent)
#
#   local last_break = 1
#   local function sub(word_begin, word, word_end)
#     if word_end - last_break > limit then
#       last_break = word_begin
#       return "\n" .. indent .. word
#     end
#   end
#
#   return indent .. x:gsub("%s+()(%S+)()", sub)
# end
#
# local function split(x, s)
#   s = s or "%s"
#   return x:gmatch("([^" .. s .. "]*)")
# end
#
# local function indent(x, i)
#   i = i or " "
#   local r = ""
#   local f = true
#   for line in split(x, "\n") do
#     if f ~= true then
#       r = r .. "\n"
#     end
#     r = r .. i .. line
#     f = false
#   end
#   return r
# end
#
# local function pretty(x, indent, limit)
#   return wrap(join(trim(builtin(types(x)))), indent, limit)
# end
#
# local function code(x)
#   return indent(trim(x), (" "):rep(4))
# end
#
#
# -- #########################################################################
# -- TEMPLATE
#
*$(help_tag_prefix).txt*
$(tag(ldoc.project))
$(tag(help_tag_prefix))

$(pretty(ldoc.description))

# if module.info then
#   local fmt = "%-10s:    %s"
#   for tag, value in module.info:iter() do
    $(fmt:format(tag, value))
#   end
# end
# if module.tags.homepage then
    Homepage  :    <$(module.tags.homepage[1])>
# end


==============================================================================
$(prefixed_tag("_contents"))

CONTENTS

    1. Overview ..................... |$(help_tag_prefix)_overview|
    2. Examples ..................... |$(help_tag_prefix)_examples|
# for kind, mods, type in ldoc.kinds() do
#   if kind == "Examples" then
#     local i = 1
#     for example in mods() do
#       local example_name = example.name:gsub("%.lua", ""):gsub("[0-9]+_", "")
#       local example_num = "2." .. i .. "."
#       local example_sec = example_num .. " " .. example_name
#       local example_index =
#         (example_sec .. "................................."):sub(1, 31)
#       local example_help_tag =
#         help_tag_prefix ..  "_" ..
#         example_name:lower() .. "_example"
#       local example_link = "|" .. example_help_tag .. "|"
      $(example_index) $(example_link)
#       i = i + 1
#     end
#   end
# end
    3. Documentation ................ |$(help_tag_prefix)_documentation|
# local i = 1
# for kind, items, type in module.kinds() do
#   if ldoc.allowed_in_contents(type, module) then
#     local kind_name = trim(kind:gsub("Class ", ""))
#     local kind_num = "3." .. i .. "."
#     local kind_sec = kind_num .. " " .. kind_name
#     local kind_index =
#       (kind_sec .. ".........................,,,.........."):sub(1, 31)
#     local kind_sep = kind:match("Class") and "." or "_"
#     local kind_help_tag =
#       help_tag_prefix .. kind_sep ..
#       kind_name:lower():gsub(" ", "_")
#     local kind_link = "|" .. kind_help_tag .. "|"
      $(kind_index) $(kind_link)
#     i = i + 1
#   end
# end
    4. Changelog .................... |$(help_tag_prefix)_changelog|
    5. Bugs ......................... |$(help_tag_prefix)_bugs|
    6. Contributing ................. |$(help_tag_prefix)_contributing|
    7. License ...................... |$(help_tag_prefix)_license|


==============================================================================
$(prefixed_tag("_overview"))

1. Overview

$(pretty(ldoc.full_description))


==============================================================================
$(prefixed_tag("_examples"))

2. Examples
# for kind, mods, type in ldoc.kinds() do
#   if kind == "Examples" then
#     local i = 1
#     for example in mods() do
#       local example_name = example.name:gsub("%.lua", ""):gsub("[0-9]+_", "")


------------------------------------------------------------------------------
$(prefixed_tag("_" .. example_name:lower() .. "_example"))
$(pretty("2." .. i .. ". " .. example_name, 2))

>
$(code(example.body))
<
#       i = i + 1
#     end
#   end
# end


==============================================================================
$(prefixed_tag("_documentation"))

3. Documentation


# local j = 1
# for kind, items, type in module.kinds() do
#   if ldoc.allowed_in_contents(type, module) then
#     local kind_name = trim(kind:gsub("Class ", ""))
#     local kind_num = "3." .. j .. "."
#     local kind_header = kind_num .. " " .. kind_name
#     local kind_sep = kind:match("Class") and "." or "_"
#     local kind_help_tag = kind_sep .. kind_name:gsub(" ", "_"):lower()
------------------------------------------------------------------------------
$(prefixed_tag(kind_help_tag))

$(kind_header)
#     local kind_item = module.kinds:get_item(kind)
#     if kind_item then
#       if not string_is_empty(kind_item.summary) then

$(pretty(kind_item.summary))
#       end
#       if not string_is_empty(kind_item.description) then

$(pretty(kind_item.description))
#       end
#
#       if kind_item.tags and
#          kind_item.tags.field and
#          kind_item.type == "type" then

  Fields: ~
#         for i, field in ipairs(kind_item.tags.field) do
#           local field_name = field:match("%s*(%w+)")
#           local field_description = field:match("%s*%w+(.*)")
#
#           local field_type = ""
#           if kind_item.modifiers and kind_item.modifiers.field then
#             field_type = kind_item.modifiers.field[i].type
#           end
#
#           if not string_is_empty(field_type) then

    {$(field_name)} $(types(trim(field_type)))
#           else

    {$(field_name)}
#           end
#
$(pretty(field_description, 6))
#         end -- for ipairs(kind_item.tags.field)
#       end -- if kind_item.tags.field
#     end -- if kind_item


#     for item in items() do
$(prefixed_tag("." .. item.name))

$(item.name)$(args(item.args))

$(pretty(item.summary))
#       if not string_is_empty(item.description) then

$(pretty(item.description))
#       end
#
#       if show_params and item.params then

  Parameters: ~
#         for param in iter(item.params) do
#           for subparam in iter(item:subparam(param)) do
#             local subparam_name = item:display_name_of(subparam)
#             local subparam_type = types(item:type_of_param(subparam))
#             local subparam_default = item:default_of_param(subparam)
#             local subparam_readonly = item:readonly(subparam) and "!" or ""

#             if subparam_default == true then
    [{$(subparam_name)} $(subparam_type)$(subparam_readonly)]
#             elseif subparam_default then
    {$(subparam_name)} $(subparam_type)$(subparam_readonly) = $(subparam_default)
#             else
    {$(subparam_name)} $(subparam_type)$(subparam_readonly)
#             end
#
$(pretty(item.params.map[subparam], 6))
#           end -- for iter(item:subparam(param))
#         end -- for iter(item.params)
#       end -- if show_params
#
#       if show_return and item.retgroups then

  Returns: ~
#         for _, group in ipairs(item.retgroups) do
#           for ret in group:iter() do
#             local type = item:return_type(ret)
#             if not string_is_empty(type) then

$(pretty(type, 4))
#             end
#             if not string_is_empty(ret.text) then
$(pretty(ret.text, 6))
#             end
#           end -- for ret
#         end -- for ipairs(item.retgroups)
#       end -- if show_return
#
#       if show_return and item.raise then

  Raises: ~
    $(item.raise)
#       end -- if item.raise
#
#       if item.usage then

  Usage: ~
#         for usage in iter(item.usage) do

>
$(code(usage))
<
#         end
#       end -- if item.usage
#
#       if item.see then

  See also: ~

#         for see in iter(item.see) do
    |$(help_tag_prefix .. "." .. see.label)|
#         end
#       end -- if item.see
#
#       if custom_tags then
#         for tag in iter(custom_tags) do
#           item_tag = item.tags[tag[1]]
#           if item_tag and not item_tag.hidden then
#             if not string_is_empty(tag.title) then

  $(tag.title): ~
#             end
#             for value in iter(item_tag) do

$(pretty(tag.format and tag.format(value) or value, 4))
#             end
#           end -- if item_tag and not item_tag.hidden
#         end -- for iter(custom_tags)
#       end -- if custom_tags


#     end -- for items()
#
#     j = j + 1
#   end -- if ldoc.allowed_in_contents(type, module)
# end -- for module.kinds()


==============================================================================
$(prefixed_tag("_examples"))

4. Changelog


==============================================================================
$(prefixed_tag("_bugs"))

5. Bugs


==============================================================================
$(prefixed_tag("_contributing"))

6. Contributing


==============================================================================
$(prefixed_tag("_license"))

7. License

>
  MIT License
  Copyright $(module.tags.copyright)
  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the “Software”), to
  deal in the Software without restriction, including without limitation the
  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
  sell copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  THE SOFTWARE.
<
